name: AI App Builder with AI Debugging

on:
  repository_dispatch:
    types: [build-app]
  workflow_dispatch:
    inputs:
      app_name:
        description: 'App Name'
        required: true
        default: 'MyApp'
      swift_code:
        description: 'Swift Code (base64 encoded)'
        required: true

jobs:
  build-macos-app:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup build environment
      run: |
        echo "üöÄ Starting AI App Build with AI Debugging"
        echo "üíª macOS Runner: $(sw_vers -productVersion)"
        echo "üß† Available RAM: $(sysctl -n hw.memsize | awk '{print $1/1024/1024/1024 " GB"}')"
        echo "‚ö° CPU Cores: $(sysctl -n hw.ncpu)"
        xcode-select --version
        swift --version
    
    - name: Decode and prepare Swift code
      run: |
        APP_NAME="${{ github.event.inputs.app_name || github.event.client_payload.app_name }}"
        SWIFT_CODE_B64="${{ github.event.inputs.swift_code || github.event.client_payload.swift_code }}"
        
        echo "üìù App Name: $APP_NAME"
        
        mkdir -p "$APP_NAME"
        cd "$APP_NAME"
        
        echo "$SWIFT_CODE_B64" | base64 --decode > main.swift
        
        cat > Package.swift << EOL
        // swift-tools-version: 5.9
        import PackageDescription
        
        let package = Package(
            name: "$APP_NAME",
            platforms: [.macOS(.v14)],
            products: [.executable(name: "$APP_NAME", targets: ["$APP_NAME"])],
            targets: [.executableTarget(name: "$APP_NAME", path: ".")]
        )
EOL
        
        echo "‚úÖ Project structure created"
        ls -la
        echo "üìÑ Swift code preview:"
        head -20 main.swift
        
        echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
    
    - name: Build Swift application with AI debugging
      run: |
        cd "$APP_NAME"
        
        echo "üî® Building Swift application..."
        echo "‚è±Ô∏è  Build started: $(date)"
        
        BUILD_LOG="build.log"
        ERROR_LOG="error.log"
        
        if swift build -c release --verbose > "$BUILD_LOG" 2> "$ERROR_LOG"; then
            echo "‚úÖ Build successful!"
            cat "$BUILD_LOG"
        else
            echo "‚ùå Build failed - activating AI debugging..."
            
            echo "ü§ñ AI DEBUGGING ACTIVATED"
            echo "========================"
            
            echo "üìÑ Build errors:"
            cat "$ERROR_LOG"
            
            echo "üìÑ Build log:"
            tail -50 "$BUILD_LOG"
            
            echo "üìÑ Source code analysis:"
            wc -l main.swift
            echo "First 30 lines of source:"
            head -30 main.swift
            
            echo "üß† AI Debug Analysis:"
            echo "The build failed with the following errors:"
            cat "$ERROR_LOG"
            echo ""
            echo "Possible fixes:"
            echo "1. Check for syntax errors in Swift code"
            echo "2. Verify all imports are correct"
            echo "3. Ensure SwiftUI components are properly structured"
            echo "4. Check for missing dependencies"
            
            echo "üîß Attempting automatic analysis..."
            
            if grep -q "import SwiftUI" main.swift; then
                echo "‚úÖ SwiftUI import found"
            else
                echo "‚ö†Ô∏è  No SwiftUI import detected"
            fi
            
            if grep -q "@main" main.swift; then
                echo "‚úÖ @main found"
            else
                echo "‚ö†Ô∏è  No @main entry point detected"
            fi
            
            if grep -q "WindowGroup" main.swift; then
                echo "‚úÖ WindowGroup found"
            else
                echo "‚ö†Ô∏è  No WindowGroup detected"
            fi
            
            if grep -q "ContentView" main.swift; then
                echo "‚úÖ ContentView found"
            else
                echo "‚ö†Ô∏è  No ContentView detected"
            fi
            
            echo "üíæ Saving debug info for analysis..."
            
            cat > debug_report.json << EOL2
{
  "build_failed": true,
  "timestamp": "$(date -Iseconds)",
  "errors": "$(cat "$ERROR_LOG" | head -20 | tr '\n' '|')",
  "build_log_tail": "$(tail -20 "$BUILD_LOG" | tr '\n' '|')",
  "source_lines": $(wc -l < main.swift),
  "analysis": {
    "has_swiftui_import": $(grep -q "import SwiftUI" main.swift && echo "true" || echo "false"),
    "has_main": $(grep -q "@main" main.swift && echo "true" || echo "false"),
    "has_windowgroup": $(grep -q "WindowGroup" main.swift && echo "true" || echo "false"),
    "has_contentview": $(grep -q "ContentView" main.swift && echo "true" || echo "false")
  }
}
EOL2
            
            echo "üîó Debug report created: debug_report.json"
            cat debug_report.json
            
            exit 1
        fi
        
        EXECUTABLE_PATH=$(find .build/release -name "$APP_NAME" -type f | head -1)
        echo "üéØ Executable found: $EXECUTABLE_PATH"
        
        if [ ! -f "$EXECUTABLE_PATH" ]; then
          echo "‚ùå Executable not found!"
          find .build -name "$APP_NAME" -type f
          exit 1
        fi
        
        echo "EXECUTABLE_PATH=$EXECUTABLE_PATH" >> $GITHUB_ENV
    
    - name: Create macOS app bundle
      run: |
        cd "$APP_NAME"
        
        echo "üì¶ Creating .app bundle..."
        
        APP_BUNDLE="${APP_NAME}.app"
        mkdir -p "$APP_BUNDLE/Contents/MacOS"
        mkdir -p "$APP_BUNDLE/Contents/Resources"
        
        cp "$EXECUTABLE_PATH" "$APP_BUNDLE/Contents/MacOS/$APP_NAME"
        chmod +x "$APP_BUNDLE/Contents/MacOS/$APP_NAME"
        
        cat > "$APP_BUNDLE/Contents/Info.plist" << EOL
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleDevelopmentRegion</key>
            <string>en</string>
            <key>CFBundleExecutable</key>
            <string>$APP_NAME</string>
            <key>CFBundleIdentifier</key>
            <string>com.ai.${APP_NAME,,}</string>
            <key>CFBundleInfoDictionaryVersion</key>
            <string>6.0</string>
            <key>CFBundleName</key>
            <string>$APP_NAME</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0</string>
            <key>CFBundleVersion</key>
            <string>1</string>
            <key>LSMinimumSystemVersion</key>
            <string>14.0</string>
            <key>NSHighResolutionCapable</key>
            <true/>
        </dict>
        </plist>
EOL
        
        echo "‚úÖ App bundle created: $APP_BUNDLE"
        
        zip -r "${APP_NAME}-macOS.zip" "$APP_BUNDLE"
        
        echo "üì¶ App bundle size:"
        du -sh "$APP_BUNDLE"
        du -sh "${APP_NAME}-macOS.zip"
        
        echo "ZIP_FILE=${APP_NAME}-macOS.zip" >> $GITHUB_ENV
    
    - name: AI Quality Test
      run: |
        cd "$APP_NAME"
        
        echo "ü§ñ AI Quality Testing..."
        
        echo "üß™ Running automated tests:"
        echo "‚úÖ App bundle structure: $([ -d "$APP_BUNDLE" ] && echo "PASS" || echo "FAIL")"
        echo "‚úÖ Executable exists: $([ -f "$APP_BUNDLE/Contents/MacOS/$APP_NAME" ] && echo "PASS" || echo "FAIL")"
        echo "‚úÖ Info.plist exists: $([ -f "$APP_BUNDLE/Contents/Info.plist" ] && echo "PASS" || echo "FAIL")"
        echo "‚úÖ Executable permissions: $([ -x "$APP_BUNDLE/Contents/MacOS/$APP_NAME" ] && echo "PASS" || echo "FAIL")"
        
        file "$APP_BUNDLE/Contents/MacOS/$APP_NAME"
        
        echo "üéâ AI Quality Test Complete!"
    
    - name: Upload successful build
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-macOS-App
        path: ${{ env.APP_NAME }}/${{ env.ZIP_FILE }}
        retention-days: 30
    
    - name: Upload debug info on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-Debug-Info
        path: ${{ env.APP_NAME }}/debug_report.json
        retention-days: 7
    
    - name: Generate final report
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
            echo "üéâ BUILD COMPLETED SUCCESSFULLY!"
            echo "üì± App: $APP_NAME"
            echo "üîó Download: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        else
            echo "‚ùå BUILD FAILED - AI DEBUGGING COMPLETE"
            echo "üìä Debug info uploaded as artifact"
            echo "üîó Debug Report: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        fi
