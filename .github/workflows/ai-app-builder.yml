name: AI App Builder

on:
  repository_dispatch:
    types: [build-app]
  workflow_dispatch:
    inputs:
      app_name:
        description: 'App Name'
        required: true
        default: 'MyApp'
      swift_code:
        description: 'Swift Code (base64 encoded)'
        required: true

jobs:
  build-macos-app:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup build environment
      run: |
        echo "🚀 Starting AI App Build"
        echo "💻 macOS Runner: $(sw_vers -productVersion)"
        swift --version
    
    - name: Decode Swift code
      run: |
        APP_NAME="${{ github.event.inputs.app_name || github.event.client_payload.app_name }}"
        SWIFT_CODE_B64="${{ github.event.inputs.swift_code || github.event.client_payload.swift_code }}"
        
        echo "📝 App Name: $APP_NAME"
        
        mkdir -p "$APP_NAME"
        cd "$APP_NAME"
        
        echo "$SWIFT_CODE_B64" | base64 --decode > main.swift
        
        cat > Package.swift << 'PKGEOF'
// swift-tools-version: 5.9
import PackageDescription

let package = Package(
    name: "$APP_NAME",
    platforms: [.macOS(.v14)],
    products: [.executable(name: "$APP_NAME", targets: ["$APP_NAME"])],
    targets: [.executableTarget(name: "$APP_NAME", path: ".")]
)
PKGEOF
        
        sed -i '' "s/\$APP_NAME/$APP_NAME/g" Package.swift
        
        echo "✅ Project created"
        echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
    
    - name: Build Swift application
      run: |
        cd "$APP_NAME"
        
        echo "🔨 Building Swift application..."
        
        if swift build -c release; then
            echo "✅ Build successful!"
        else
            echo "❌ Build failed"
            echo "📄 Source code:"
            head -30 main.swift
            exit 1
        fi
        
        EXECUTABLE_PATH=$(find .build/release -name "$APP_NAME" -type f | head -1)
        echo "🎯 Executable: $EXECUTABLE_PATH"
        
        echo "EXECUTABLE_PATH=$EXECUTABLE_PATH" >> $GITHUB_ENV
    
    - name: Create app bundle
      run: |
        cd "$APP_NAME"
        
        APP_BUNDLE="${APP_NAME}.app"
        mkdir -p "$APP_BUNDLE/Contents/MacOS"
        mkdir -p "$APP_BUNDLE/Contents/Resources"
        
        cp "$EXECUTABLE_PATH" "$APP_BUNDLE/Contents/MacOS/$APP_NAME"
        chmod +x "$APP_BUNDLE/Contents/MacOS/$APP_NAME"
        
        cat > "$APP_BUNDLE/Contents/Info.plist" << 'PLISTEOF'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleExecutable</key>
    <string>$APP_NAME</string>
    <key>CFBundleIdentifier</key>
    <string>com.ai.$APP_NAME</string>
    <key>CFBundleName</key>
    <string>$APP_NAME</string>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>CFBundleVersion</key>
    <string>1.0</string>
</dict>
</plist>
PLISTEOF
        
        sed -i '' "s/\$APP_NAME/$APP_NAME/g" "$APP_BUNDLE/Contents/Info.plist"
        
        zip -r "${APP_NAME}-macOS.zip" "$APP_BUNDLE"
        
        echo "ZIP_FILE=${APP_NAME}-macOS.zip" >> $GITHUB_ENV
    
    - name: Upload app bundle
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-macOS-App
        path: ${{ env.APP_NAME }}/${{ env.ZIP_FILE }}
        retention-days: 30
    
    - name: Report results
      run: |
        echo "🎉 BUILD COMPLETED!"
        echo "📱 App: $APP_NAME"
        echo "🔗 Download: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
